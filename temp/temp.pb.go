// Code generated by protoc-gen-go.
// source: temp.proto
// DO NOT EDIT!

/*
Package temp is a generated protocol buffer package.

It is generated from these files:
	temp.proto

It has these top-level messages:
	Command
	Temperature
	Address
*/
package temp

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Command_CommandType int32

const (
	Command_REQUEST Command_CommandType = 0
	Command_REPLY   Command_CommandType = 1
)

var Command_CommandType_name = map[int32]string{
	0: "REQUEST",
	1: "REPLY",
}
var Command_CommandType_value = map[string]int32{
	"REQUEST": 0,
	"REPLY":   1,
}

func (x Command_CommandType) String() string {
	return proto.EnumName(Command_CommandType_name, int32(x))
}
func (Command_CommandType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Command struct {
	Command     Command_CommandType `protobuf:"varint,1,opt,name=command,enum=temp.Command_CommandType" json:"command,omitempty"`
	Address     *Address            `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	NodeName    string              `protobuf:"bytes,3,opt,name=nodeName" json:"nodeName,omitempty"`
	Temperature *Temperature        `protobuf:"bytes,4,opt,name=temperature" json:"temperature,omitempty"`
}

func (m *Command) Reset()                    { *m = Command{} }
func (m *Command) String() string            { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()               {}
func (*Command) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Command) GetCommand() Command_CommandType {
	if m != nil {
		return m.Command
	}
	return Command_REQUEST
}

func (m *Command) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Command) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *Command) GetTemperature() *Temperature {
	if m != nil {
		return m.Temperature
	}
	return nil
}

type Temperature struct {
	Temperature float32 `protobuf:"fixed32,1,opt,name=temperature" json:"temperature,omitempty"`
}

func (m *Temperature) Reset()                    { *m = Temperature{} }
func (m *Temperature) String() string            { return proto.CompactTextString(m) }
func (*Temperature) ProtoMessage()               {}
func (*Temperature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Temperature) GetTemperature() float32 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

type Address struct {
	Ipv4 string `protobuf:"bytes,1,opt,name=ipv4" json:"ipv4,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Address) GetIpv4() string {
	if m != nil {
		return m.Ipv4
	}
	return ""
}

func (m *Address) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func init() {
	proto.RegisterType((*Command)(nil), "temp.Command")
	proto.RegisterType((*Temperature)(nil), "temp.Temperature")
	proto.RegisterType((*Address)(nil), "temp.Address")
	proto.RegisterEnum("temp.Command_CommandType", Command_CommandType_name, Command_CommandType_value)
}

func init() { proto.RegisterFile("temp.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x50, 0xcd, 0x4e, 0x03, 0x21,
	0x10, 0x96, 0xba, 0x15, 0x77, 0x88, 0xa6, 0xce, 0x09, 0x3d, 0x35, 0x9b, 0x18, 0x3d, 0xd5, 0xd8,
	0xfa, 0x02, 0xc6, 0xec, 0xcd, 0x18, 0x1d, 0xd7, 0x83, 0x47, 0x14, 0x0e, 0x1e, 0x28, 0x84, 0xa2,
	0x89, 0x4f, 0xeb, 0xab, 0xb8, 0x40, 0x57, 0xb7, 0x27, 0x3e, 0xe6, 0xfb, 0x99, 0x1f, 0x80, 0x68,
	0xac, 0x5f, 0xf8, 0xe0, 0xa2, 0xc3, 0x2a, 0xe1, 0xe6, 0x87, 0x01, 0xbf, 0x73, 0xd6, 0xaa, 0xb5,
	0xc6, 0x15, 0xf0, 0xf7, 0x02, 0x25, 0x9b, 0xb3, 0xcb, 0xe3, 0xe5, 0xe9, 0x22, 0xeb, 0xb7, 0xfc,
	0xf0, 0x76, 0xdf, 0xde, 0xd0, 0xa0, 0xc4, 0x0b, 0xe0, 0x4a, 0xeb, 0x60, 0x36, 0x1b, 0x39, 0xe9,
	0x4d, 0x62, 0x79, 0x54, 0x4c, 0xb7, 0xa5, 0x48, 0x03, 0x8b, 0x67, 0x70, 0xb8, 0x76, 0xda, 0x3c,
	0x28, 0x6b, 0xe4, 0x7e, 0xaf, 0xac, 0xe9, 0xef, 0xdf, 0x77, 0x16, 0xc9, 0x64, 0x82, 0x8a, 0x9f,
	0xc1, 0xc8, 0x2a, 0x07, 0x9d, 0x94, 0xa0, 0xee, 0x9f, 0xa0, 0xb1, 0xaa, 0x39, 0x07, 0x31, 0x9a,
	0x08, 0x05, 0x70, 0x6a, 0x9f, 0x5e, 0xda, 0xe7, 0x6e, 0xb6, 0x87, 0x35, 0x4c, 0xa9, 0x7d, 0xbc,
	0x7f, 0x9d, 0xb1, 0xe6, 0x0a, 0xc4, 0x28, 0x02, 0xe7, 0xbb, 0xad, 0xd2, 0xa2, 0x93, 0xdd, 0xdc,
	0x6b, 0xe0, 0xdb, 0xe1, 0x11, 0xa1, 0xfa, 0xf0, 0x5f, 0x37, 0x59, 0x55, 0x53, 0xc6, 0xa9, 0xe6,
	0x5d, 0x88, 0x79, 0xdb, 0x29, 0x65, 0xfc, 0x76, 0x90, 0x4f, 0xba, 0xfa, 0x0d, 0x00, 0x00, 0xff,
	0xff, 0xd2, 0x4f, 0x92, 0x96, 0x60, 0x01, 0x00, 0x00,
}
